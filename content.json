{"meta":{"title":"张先生的博客","subtitle":null,"description":null,"author":"zhang wenbin","url":"https://zwbblog.github.io.git"},"pages":[],"posts":[{"title":"Hello myFriends","slug":"welcome","date":"2017-12-07T05:51:55.749Z","updated":"2017-12-07T08:41:46.331Z","comments":true,"path":"2017/12/07/welcome/","link":"","permalink":"https://zwbblog.github.io.git/2017/12/07/welcome/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"new Regexp","slug":"Reg","date":"2016-06-08T06:07:12.000Z","updated":"2017-12-07T06:34:35.413Z","comments":true,"path":"2016/06/08/Reg/","link":"","permalink":"https://zwbblog.github.io.git/2016/06/08/Reg/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657## 常用字符集：* \\做为转意，即通常在\"\\\"后面的字符不按原来意义解释，如/b/匹配字符\"b\"，当b前面加了反斜杆后/\\b/，转意为匹配一个单词的边界;/a*/将匹配a,aa,aaa，加了\"\\\"后，/a\\*/将只匹配\"a*\"* ^ 匹配一个输入或一行的开头，/^a/匹配\"an A\"，而不匹配\"An a\" * $ 匹配一个输入或一行的结尾，/a$/匹配\"An a\"，而不匹配\"an A\" * * 匹配前面元字符0次或多次，/ba*/将匹配b,ba,baa,baaa * + 匹配前面元字符1次或多次，/ba*/将匹配ba,baa,baaa * ? 匹配前面元字符0次或1次，/ba*/将匹配b,ba * (x) 匹配x保存x在名为$1...$9的变量中 * x|y 匹配x或y * &#123;n&#125; 精确匹配n次 * &#123;n,&#125; 匹配n次以上 * &#123;n,m&#125; 匹配n-m次 * [xyz] 字符集(character set)，匹配这个集合中的任一一个字符(或元字符) * [^xyz] 不匹配这个集合中的任何一个字符 * [\\b] 匹配一个退格符 * \\b 匹配一个单词的边界 * \\B 匹配一个单词的非边界 * \\cX 这儿，X是一个控制符，/\\cM/匹配Ctrl-M * \\d 匹配一个数字字符，/\\d/ = /[0-9]/ * \\D 匹配一个非数字字符，/\\D/ = /[^0-9]/ * \\n 匹配一个换行符 * \\r 匹配一个回车符 * \\s 匹配一个空白字符，包括\\n,\\r,\\f,\\t,\\v等 * \\S 匹配一个非空白字符，等于/[^\\n\\f\\r\\t\\v]/ * \\t 匹配一个制表符 * \\v 匹配一个重直制表符 * \\w 匹配一个可以组成单词的字符(alphanumeric，这是我的意译，含数字)，包括下划线，如[\\w]匹配\"$5.98\"中的5，等于[a-zA-Z0-9] * \\W 匹配一个不可以组成单词的字符，如[\\W]匹配\"$5.98\"中的$，等于[^a-zA-Z0-9]。* flags: g （全文查找出现的所有 pattern）* i （忽略大小写）* m （多行查找）## 动态正则:* var re = \"/\" + reg + \"/igm\" 或者 reg = new RegExp(\"pattern\",\"igm\")用正则表达式限制只能输入数字：onkeyup=\"value=value.replace(/[^\\d]/g,') 用正则表达式限制只能输入中文：onkeyup=\"value=value.replace(/[^\\u4E00-\\u9FA5]/g,')\" 用正则表达式限制只能输入数字和英文：onkeyup=\"value=value.replace(/[\\W]/g,') 去掉字符串头尾多余的空格:function String.prototype.Trim()&#123;return this.replace(/(^\\s*)|(\\s*$)/g, \"\");&#125;\"^\\\\d+$\" //非负整数（正整数 + 0） \"^[0-9]*[1-9][0-9]*$\" //正整数 \"^((-\\\\d+)|(0+))$\" //非正整数（负整数 + 0） \"^-[0-9]*[1-9][0-9]*$\" //负整数 \"^-?\\\\d+$\" //整数 \"^\\\\d+(\\\\.\\\\d+)?$\" //非负浮点数（正浮点数 + 0） \"^(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\" //正浮点数\"^((-\\\\d+(\\\\.\\\\d+)?)|(0+(\\\\.0+)?))$\" //非正浮点数（负浮点数 + 0） \"^(-(([0-9]+\\\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\" //负浮点数\"^(-?\\\\d+)(\\\\.\\\\d+)?$\" //浮点数 \"^[A-Za-z]+$\" //由26个英文字母组成的字符串 \"^[A-Z]+$\" //由26个英文字母的大写组成的字符串 \"^[a-z]+$\" //由26个英文字母的小写组成的字符串 \"^[A-Za-z0-9]+$\" //由数字和26个英文字母组成的字符串 \"^\\\\w+$\" //由数字、26个英文字母或者下划线组成的字符串 \"^[\\\\w-]+(\\\\.[\\\\w-]+)*@[\\\\w-]+(\\\\.[\\\\w-]+)+$\" //email地址 \"^[a-zA-z]+://(\\\\w+(-\\\\w+)*)(\\\\.(\\\\w+(-\\\\w+)*))*(\\\\?\\\\S*)?$\" //url","categories":[],"tags":[]},{"title":"vue.js","slug":"vue-js","date":"2015-02-01T06:07:12.000Z","updated":"2017-12-07T08:37:42.223Z","comments":true,"path":"2015/02/01/vue-js/","link":"","permalink":"https://zwbblog.github.io.git/2015/02/01/vue-js/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389### vue1.0和2.0v-on:click 可以简写为 @clickv-bind 可以简写成 :v-cloak/v-text/v-html 防止闪烁 [v-cloak]&#123;display:none&#125;事件对象为:$event 阻止冒泡: a) e.cancelBubble=true; b) @click.stop=\"fun()\"; 阻止默认行为: a) e.preventDefault(); b) @contextmenu.prevent键盘事件: 按下:@keydown=show($event); e.keyCode 抬起:@keyup=show($event); e.keyCode 回车(13,enter)、上(up)、下(down)、左(left)、右(right) 回车键示例:@keydown.13=fun()||@keydown.enter=fun()属性: v-bind &lt;img src=\"&#123;&#123;url&#125;&#125;\" alt=\"\"&gt; 效果能出来，但是会报错 &lt;img v-bind:src=\"url\" alt=\"\"&gt; 效果能出来，不报错 :class和:style属性注意点 :class=&#123;red:true/false,blue:true/false,...&#125; :style=\"a\" --&gt; data:&#123;a:&#123;color:\"red\",backgroundColor:\"blue\"&#125;&#125;模版: &#123;&#123;msg&#125;&#125; 数据与模版同时更新 &#123;&#123;*msg&#125;&#125; 数据只绑定一次 &#123;&#123;&#123;msg&#125;&#125;&#125; html转意输出过滤器: 内置过滤器: &#123;&#123;msg|filterA (参数)|filterB (参数)&#125;&#125; uppercase 转大写 lowercase 转小写 capitalize 首字母大写 currency 钱币符号 debounce 延迟 ... 与数组配合使用的过滤器: limitBy 参数一取几个 参数二从哪个开始取 filterBy 过滤数据 orderBy 排序 1正序 -1倒序 双向过滤器: 自定义过滤器交互: 引入 vue-resource get: get:function () &#123; this.$http.get(\"data/1.txt\").then(function (res) &#123; alert(\"请求成功\"+\" \"+res.status+\" \"+res.data) &#125;,function (res) &#123; alert(\"请求失败\"+\" \"+res.status+\" \"+res.data) &#125;) &#125;, get2:function () &#123; this.$http.get(\"data/1.php\",&#123; //传参给服务器 a:1, b:2 &#125;).then(function (res) &#123; alert(\"请求成功\"+\" \"+res.status+\" \"+res.data) &#125;,function (res) &#123; alert(\"请求失败\"+\" \"+res.status+\" \"+res.data) &#125;) &#125; post: post:function () &#123; //三个参数 （url,参数,配置） this.$http.post(\"data/2.php\",&#123;a:1,b:50&#125;,&#123;emulateJSON:true&#125;).then(function (res) &#123; alert(\"请求成功\"+\" \"+res.status+\" \"+res.data) &#125;,function (res) &#123; alert(\"请求失败\"+\" \"+res.status+\" \"+res.data) &#125;) &#125; jsonp: jsonp: function () &#123; this.$http.jsonp(\"https://www.baidu.com/his\";, &#123;wd: \"a\"&#125;, //第二个参数是上传给服务器的数据 &#123;jsonp: \"callback\"&#125;) //回调函数的名字,默认为callback .then(function (res) &#123; console.log((\"请求成功\" + \" \" + res.status + \" \" + res.data.s)); &#125;,function (res) &#123; alert(\"请求失败\" + \" \" + res.status + \" \" + res.data) &#125;) &#125; this.$http(&#123; url:\"https://www.baidu.com/his\";, method:\"jsonp\"/\"get\"/\"post\", jsonp:\"cb\", //cbName data:&#123;a:1,b:2&#125; &#125;).then(function(res)&#123;\"成功\"&#125;,function(res)&#123;\"失败\"&#125;)Vue生命周期: 钩子函数 init: created:function()&#123;\"实例已经创建\"&#125; beforeCompile:function()&#123;\"编译之前\"&#125; compiled:function()&#123;\"编译之后\"&#125; ready:function()&#123;\"插入到文档中\"&#125; beforeDestroy:function()&#123;\"销毁之前\"&#125; destroyed:function()&#123;\"销毁之后\"&#125;计算属性: computed:&#123;&#125;内置属性 vm.$el --&gt;绑定的元素 vm.$data --&gt;数据对象 vm.$mount --&gt;手动挂载 new Vue().$mount(\"body\") vm.$options --&gt;自定义属性 vm.$destroy() --&gt;销毁对象 vm.$log() --&gt;查看数据状态循环数据重复 track-by=\"key\"自定义指令: 属性指令: Vue.directive(\"Name\",function(color)&#123;&#125;) //this.el--&gt;指令所对应的元素 v-red --&gt;red v-red=\"color\" 拖拽 元素指令: Vue.elementDirective(\"Name\",&#123;bind:function()&#123;&#125;&#125;) 键盘信息: Vue.directive(\"on\").keyCodes.ctrl=17监听事件: $watch vm.$watch(\"a\",function ()&#123;&#125;) //浅度监听 vm.$watch(\"json\",function ()&#123;&#125;,&#123;deep:true&#125;) //深度监听结合animate.css做动画:Vue组件: 全局组件: var title=Vue.extend(&#123; data()&#123; //组件中放数据 return &#123; msg:\"我是自定义的标题组件\" &#125; &#125;, methods:&#123; change()&#123; this.msg=\"改变数据\" &#125; &#125; template:\"&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;\" &#125;); Vue.component(\"aaa\",title); 局部组件: 去掉 Vue.component(\"aaa\",title),把它写在根组件上(components); new Vue(&#123; components:&#123; aaa:title &#125; &#125;) 另一种写法(全局): Vue.component(\"you-aaa\",&#123; template:\"&lt;b&gt;简洁写法&lt;/b&gt;\" &#125;); new Vue(&#123; components:&#123; aaa:&#123; template:\"简洁的局部组件\" &#125; &#125; &#125;) 动态组件: &lt;component :is=\"a\"&gt;&lt;/component&gt; 组件之间的通信: 子获取父的数据 父模版中调用的子组件绑定属性记录父组件的数据 子组件props展示出数据 父获取子的数据 slot占位 类似ng中的transcludevue-router SPA单页面应用 html 跳转 v-link=&#123;path:\"/home\"&#125; v-link=&#123;path:\"/news\"&#125; 显示视图 &lt;router-view&gt;&lt;/router-view&gt; js 1.创建一个根组件 var App=Vue.extend() 2.创建home和news组件 var Home=Vue.extend(&#123; template:\"&lt;h1&gt;主页内容&lt;/h1&gt;\" &#125;) var News=Vue.extend(&#123; template:\"&lt;h1&gt;主页内容&lt;/h1&gt;\" &#125;) 3.创建路由模块 var router=new VueRouter() 4.配置路由 router.map(&#123; \"/home\":&#123;component:Home&#125;, \"/news\":&#123;component:News&#125; &#125;) 5.开启路由 router.start(App,\"#box\") 6.设置默认显示 router.redirect(&#123; \"/\":\"home\" &#125;)vue-cli脚手架(用cmd的cd找文件路径--&gt;c:或者e:找到路径) 1 npm install vue-cli -g 验证是否安装成功 vue --version 2 生成项目模版 vue init 模版名称 本地文件名 vue init simple vuePro 模板有 simple webpack 多了代码规范和单元检测 webpack-simple （推荐使用） 3 进入到生成目录里面 npm install 4 运行 npm run devVue2.0 1.不支持模版中多个代码片段了 2.组件的写法有所不同 不推荐在使用Vue.extend() 新写法: var home=&#123; template:\"#a1\", data()&#123; return &#123; a:12342351513 &#125; &#125;, methods:&#123;&#125; &#125;; Vue.component(\"aa\",home); &lt;aa&gt;&lt;/aa&gt; 精简写法:Vue.component(\"bb\",&#123;template:\"&lt;h1&gt;模版信息&lt;/h1&gt;\"&#125;) &lt;bb&gt;&lt;/bb&gt; 3.生命周期 beforeCreate 实例刚创建,身上没有属性 created 实例已经创建,属性已经绑定 beforeMount 模版编译之前 mounted 模版编译完成 相当于ready beforeUpdate 组件更新之前 updated 组件更新之后 beforeDestroy 组件销毁之前 destroyed 组件销毁之后 4.v-for循环中的索引 v-for=\"(val,index) in arr\" 与1.0相反 默认可以添加重复数据 提高性能写法 :key=\"index\" 与1.0 track-by=\"$index\"差不多 5.自定义键盘事件 Vue.config.keyCodes.ctrl=17 1.0的写法 Vue.directive(\"on\").keyCodes.ctrl=17 6.内置过滤器删除了,需要自己自定义过滤器,传参方式也改变了 Vue.filter(\"toDou\",function(input,a,b)&#123;return ...&#125;) &#123;&#123;msg | toDou(a,b)&#125;&#125; 7.组件间的通信 子组件获取父组件的数据 props 之前子组件可以修改父组件的数据.并且可以数据同步 :msg.sync=\"a\" 现在子组件获取父组件的数据并且修改数据会报错 解决:a)同步 父组件传递一个对象类型的数据 b)子组件自己定义数据,通过mounted再把父组件的数据赋值给子组件的数据 *单一事件管理组件通信 8.动画-transition 1.&lt;transition name=\"fade\"&gt; html元素、路由、组件... &lt;/transition&gt; 2.配合animate使用 单个元素动画 transition 多个元素动画 transition-group 9.路由 html: &lt;router-link to=\"/home\"&gt;&lt;/router-link&gt; &lt;router-view&gt;&lt;/router-view&gt; js: //准备组件 var Home=&#123; template:\"&lt;h3&gt;我是主页内容&lt;/h3&gt;\" &#125;; var News=&#123; template:\"&lt;h3&gt;我是新闻页内容&lt;/h3&gt;\" &#125;; //配置路由 var routes=[ &#123;path:\"/home\",component:Home&#125;, &#123;path:\"/news\",component:News&#125;, &#123;path:\"*\",redirect:\"/home\"&#125; ]; //创建路由实例对象 var router=new VueRouter(&#123;routes&#125;); //挂载路由到Vue对象 new Vue(&#123; router, el:\"#box\" &#125;) 路由嵌套及传参 var routes=[ &#123;path:\"/home\",component:Home&#125;, &#123;path:\"/user\",component:User, children:[&#123;path:\"/user/:username/age/:age\",component:Username&#125;] *核心 &#125;, &#123;path:\"*\",redirect:\"/home\"&#125; ]; &lt;p&gt;我是&#123;&#123;$route.params.username&#125;&#125;用户,今年&#123;&#123;$route.params.age&#125;&#125;岁&lt;/p&gt;Vue2.0脚手架 vue init webpack-simple vuePro cnpm install npm run dev 在src文件夹下创建自己的components文件夹存在组件elementUI --&gt;PC端 (http://element.eleme.io) 1.新建项目 vue init webpack-simple element-demo 2.下载element-ui框架 npm i element-ui -D (i--&gt;install D--&gt; --save-dev S--&gt; --save) 3.引入框架 2种方式 a)在index.html中link引入 b)在main.js中引入 inport ElementUI from 'element-ui' *下载style-loader再配置 cnpm install style-loader --save-dev 组件可以添加事件 自己定义的组件不能直接添加事件 需要这样写 @click.native='get'mint-ui --&gt;移动端 (http://mint-ui.github.io/#!/zh-cn)vuex：集中式管理数据 (https://vuex.vuejs.org) cnpm install vuex -save 保存在dependencies中 mapActions 管理事件(行为) mapGetters 获取数据点击跳转路由元素内 @click=\"$router.push(term.path) 参数形式 @click=\"$router.push('/home/index/data1') 手写形式方法内 this.$router.push(&#123; path:'/home/index/data1' &#125;);属性说明$route.path当前路由对象的路径，如'/view/a'$rotue.params关于动态片段（如/user/:username)的键值对信息,如&#123;username: 'paolino'&#125;$route.query请求参数，如/foo?user=1获取到query.user = 1$route.router所属路由器以及所属组件信息$route.matched数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。$route.name当前路径名字Vue.set(listArr,1,修改内容)vue路由传参&lt;router-link :to=\"'/index/data/'+params\" tag=\"li\"&gt;&lt;/router-link&gt;import axios from 'axios'Vue.prototype.$http = axiosget()&#123; var self=this; self.$http.get(\"./src/a.json\",&#123;params:&#123;a:1,b:2&#125;&#125;).then(function(res)&#123; self.myMessage=res.data; console.log(res); alert(\"请求成功get\"); &#125;).catch(function(err)&#123; alert(\"请求失败\"); &#125;); var data=&#123;c:3,d:4&#125;; self.$http(&#123;url:\"./src/b.txt\",method:\"get\",params:data&#125;).then(function(res)&#123; console.log(res); alert(\"请求成功\"); &#125;).catch(function(err)&#123; alert(\"请求失败\"); &#125;);//也使用jquery的请求方式 $.ajax(&#123; type:\"post\", url: \"./src/a.json\", data: &#123;c:3,d:4&#125;, dataType:\"json\", success:function(res)&#123; alert(\"请求成功\") &#125; &#125;);//jquery请求并发问题解决$.when($.ajax(\"./src/a.json\"),$.ajax(\"./src/b.txt\")).done(function(res1,res2)&#123; console.log(res1[0]); console.log(res2[0]);&#125;)//axios请求并发问题解决function ajax1()&#123; return self.$http.get(\"./src/a.json\")&#125;function ajax2()&#123; return self.$http.get(\"./src/b.txt\")&#125;self.$http.all([ajax1(),ajax2()]).then(self.$http.spread(function(res1,res2)&#123; console.log(res1); console.log(res2); &#125;))&#125;//保证DOM元素加载完成methods:&#123; toggle()&#123; var self=this; if(self.isShow==true)&#123; self.isShow=false &#125;else&#123; self.isShow=true; //保证DOM元素加载完成 self.$nextTick(()=&gt;&#123; self.getFocus() &#125;) &#125; &#125;, getFocus()&#123; this.$refs.inp.focus(); &#125; &#125;","categories":[],"tags":[]}]}